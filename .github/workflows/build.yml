name: Build and Upload APK

on:
  push:
    branches:
      - main  # Runs on every push to the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # ✅ Ensure the latest checkout version is used
      - name: Checkout code
        uses: actions/checkout@v4

      # ✅ Ensure latest Node.js setup
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # ✅ Install project dependencies
      - name: Install dependencies
        run: |
          npm install --legacy-peer-deps
          
      # ✅ Set up Java & Android SDK for React Native Android build
      - name: Set up Java and Android SDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          
      # ✅ Setup Android SDK
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
          
      # ✅ Show directory structure for debugging
      - name: Show project structure
        run: |
          echo "Current directory structure:"
          ls -la
          echo "Contents of src directory:"
          ls -la src || echo "No src directory"

      # ✅ Use a pre-built Android template instead of initializing a new project
      - name: Get Android template
        run: |
          echo "Downloading a pre-built Android template..."
          git clone --depth=1 https://github.com/react-native-community/react-native-template-typescript.git template
          mkdir -p android/app/src/main/assets
          mkdir -p android/app/src/main/res/drawable-mdpi
          
          # Instead of initializing a new project, we'll use a pre-made template
          wget -q https://github.com/react-native-community/react-native-template-typescript/archive/refs/heads/main.zip
          unzip -q main.zip
          
          # Copy the Android directory from the template
          cp -r react-native-template-typescript-main/template/android ./
          
          # Create necessary directories
          mkdir -p android/app/src/main/assets
          mkdir -p android/app/src/main/res/drawable-mdpi
          
          # Copy assets if available
          cp -r ./src/assets/* android/app/src/main/res/drawable-mdpi/ || echo "No assets to copy"
          
          echo "Android directory after setup:"
          ls -la android

      # ✅ Apply Android configuration
      - name: Configure Android build
        run: |
          # Set app name in android/app/src/main/res/values/strings.xml
          if [ -f android/app/src/main/res/values/strings.xml ]; then
            sed -i 's/HelloWorld/ZaykaApp/g' android/app/src/main/res/values/strings.xml
            echo "Updated app name in strings.xml"
          else
            echo "strings.xml not found"
          fi
          
          # Update package name in android/app/build.gradle
          if [ -f android/app/build.gradle ]; then
            sed -i 's/com.helloworld/com.jayrajsinh.zaykaapp/g' android/app/build.gradle
            echo "Updated package name in build.gradle"
          else
            echo "build.gradle not found"
          fi
          
          # Create a local.properties file to set SDK path
          echo "sdk.dir=$ANDROID_HOME" > android/local.properties
          echo "Created local.properties with SDK path: $ANDROID_HOME"
          
          # Copy the React Native JavaScript bundle
          echo "Creating index.android.bundle..."
          mkdir -p android/app/src/main/assets/
          npm install -g react-native-cli@2.0.1
          npx react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res/ || echo "Bundle creation failed but continuing"

      # ✅ Build the Android APK
      - name: Build Android APK
        run: |
          cd android
          echo "Current directory: $(pwd)"
          echo "Checking if gradlew exists:"
          ls -la
          echo "Making gradlew executable..."
          chmod +x gradlew
          echo "Running gradlew assembleDebug..."
          ./gradlew assembleDebug --info || echo "Debug build failed, continuing to release build"
          echo "Building release APK..."
          ./gradlew assembleRelease --info || ./gradlew --stacktrace assembleRelease

      # ✅ Debug APK Path to verify if APK was generated
      - name: Debug APK Path
        run: |
          echo "Searching for APK files..."
          find android -name "*.apk" || echo "No APK files found"
          echo "Checking specific output directories:"
          ls -la android/app/build/outputs/ || echo "No outputs directory"
          ls -la android/app/build/outputs/apk/ || echo "No apk directory"

      # ✅ Upload APK as an artifact (looking in both debug and release folders)
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: |
            android/app/build/outputs/apk/release/app-release.apk
            android/app/build/outputs/apk/debug/app-debug.apk
          if-no-files-found: warn  # Don't fail if files aren't found
