name: Build and Upload APK

on:
  push:
    branches:
      - main  # Runs on every push to the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # ✅ Ensure the latest checkout version is used
      - name: Checkout code
        uses: actions/checkout@v4

      # ✅ Ensure latest Node.js setup
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # ✅ Install project dependencies
      - name: Install dependencies
        run: |
          npm install --legacy-peer-deps
          
          # Install specific React Native dependencies
          npm install --save-dev react-native-gradle-plugin
          
          # Install necessary globally available tools
          npm install -g react-native-cli@2.0.1
          
      # ✅ Set up Java & Android SDK for React Native Android build
      - name: Set up Java and Android SDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          
      # ✅ Setup Android SDK
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
          
      # ✅ Show directory structure for debugging
      - name: Show project structure
        run: |
          echo "Current directory structure:"
          ls -la
          echo "Contents of src directory:"
          ls -la src || echo "No src directory"
          echo "Contents of node_modules:"
          ls -la node_modules | grep react-native || echo "React Native not found in node_modules"

      # ✅ Create a starter React Native Android project
      - name: Create React Native Android project
        run: |
          # Install a compatible React Native version
          npm install --save react-native
          
          # Create a basic Android template
          mkdir -p android/app/src/main/java/com/zaykaapp
          mkdir -p android/app/src/main/res/values
          mkdir -p android/app/src/main/res/drawable-mdpi
          mkdir -p android/app/src/main/assets
          
          # Download and use a basic template for Android build
          git clone --depth=1 https://github.com/facebook/react-native.git temp-rn
          cp -r temp-rn/template/android/* android/
          
          # Copy React Native Gradle Plugin to the expected location
          mkdir -p node_modules/react-native-gradle-plugin
          cp -r temp-rn/packages/react-native-gradle-plugin/* node_modules/react-native-gradle-plugin/
          
          # Copy the dependencies from package.json to the new project
          echo "Installing essential Android build dependencies..."
          cd android && ./gradlew tasks || echo "Failed to run Gradle tasks, but continuing"
          cd ..
          
          # Fix up settings.gradle to use local paths
          cat << EOF > android/settings.gradle
          rootProject.name = 'ZaykaApp'
          apply from: file("../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesSettingsGradle(settings)
          include ':app'
          includeBuild('../node_modules/react-native-gradle-plugin')
          EOF
          
          echo "Android directory after setup:"
          ls -la android

      # ✅ Apply Android configuration
      - name: Configure Android build
        run: |
          # Set app name in android/app/src/main/res/values/strings.xml
          cat << EOF > android/app/src/main/res/values/strings.xml
          <resources>
            <string name="app_name">ZaykaApp</string>
          </resources>
          EOF
          echo "Created strings.xml with app name"
          
          # Create local.properties with SDK path
          echo "sdk.dir=$ANDROID_HOME" > android/local.properties
          echo "Created local.properties with SDK path: $ANDROID_HOME"
          
          # Create a simplified build.gradle for the app
          cat << EOF > android/app/build.gradle
          apply plugin: "com.android.application"
          apply plugin: "com.facebook.react"

          import com.android.build.OutputFile

          android {
              namespace "com.jayrajsinh.zaykaapp"
              compileSdkVersion 33
              defaultConfig {
                  applicationId "com.jayrajsinh.zaykaapp"
                  minSdkVersion 21
                  targetSdkVersion 33
                  versionCode 1
                  versionName "1.0"
              }
              signingConfigs {
                  debug {
                      storeFile file('debug.keystore')
                      storePassword 'android'
                      keyAlias 'androiddebugkey'
                      keyPassword 'android'
                  }
              }
              buildTypes {
                  debug {
                      signingConfig signingConfigs.debug
                  }
                  release {
                      signingConfig signingConfigs.debug
                      minifyEnabled true
                      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
                  }
              }
          }

          dependencies {
              implementation "com.facebook.react:react-android"
              implementation "androidx.appcompat:appcompat:1.6.1"
          }

          apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
          EOF
          
          # Create a debug keystore for signing
          keytool -genkeypair -v -keystore android/app/debug.keystore -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname "CN=Android Debug,O=Android,C=US"
          
          # Copy the React Native JavaScript bundle
          echo "Creating index.android.bundle..."
          mkdir -p android/app/src/main/assets/
          npx react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res/ || echo "Bundle creation failed but continuing"
          
          # Create a minimal MainActivity.java
          cat << EOF > android/app/src/main/java/com/zaykaapp/MainActivity.java
          package com.jayrajsinh.zaykaapp;
          
          import com.facebook.react.ReactActivity;
          import com.facebook.react.ReactActivityDelegate;
          import com.facebook.react.defaults.DefaultNewArchitectureEntryPoint;
          import com.facebook.react.defaults.DefaultReactActivityDelegate;
          
          public class MainActivity extends ReactActivity {
            @Override
            protected String getMainComponentName() {
              return "ZaykaApp";
            }
            
            @Override
            protected ReactActivityDelegate createReactActivityDelegate() {
              return new DefaultReactActivityDelegate(
                  this,
                  getMainComponentName(),
                  DefaultNewArchitectureEntryPoint.getFabricEnabled());
            }
          }
          EOF

      # ✅ Build the Android APK
      - name: Build Android APK
        run: |
          cd android
          echo "Current directory: $(pwd)"
          echo "Checking if gradlew exists:"
          ls -la
          echo "Making gradlew executable..."
          chmod +x gradlew
          
          # Fix gradlew permissions
          chmod +x gradlew
          
          # Use stacktrace for better debugging
          echo "Running gradlew assembleDebug with stacktrace..."
          ./gradlew assembleDebug --stacktrace || echo "Debug build failed, continuing to release build"
          
          # Try release build if debug worked
          if [ -f app/build/outputs/apk/debug/app-debug.apk ]; then
            echo "Debug APK built successfully, attempting release build..."
            ./gradlew assembleRelease --stacktrace || echo "Release build failed"
          fi

      # ✅ Debug APK Path to verify if APK was generated
      - name: Debug APK Path
        run: |
          echo "Searching for APK files..."
          find android -name "*.apk" || echo "No APK files found"
          echo "Checking specific output directories:"
          ls -la android/app/build/outputs/ || echo "No outputs directory"
          find android -type d -name "apk" -exec ls -la {} \; || echo "No apk directories found"

      # ✅ Upload APK as an artifact (looking in both debug and release folders)
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: |
            android/app/build/outputs/apk/release/app-release.apk
            android/app/build/outputs/apk/debug/app-debug.apk
          if-no-files-found: warn  # Don't fail if files aren't found
